name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  PYTORCH_VERSION: "2.0.1"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest]
        exclude:
          # Reduce CI load - test main versions on main OS
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpq-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} --index-url https://download.pytorch.org/whl/cpu
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 olfactory_transformer --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 olfactory_transformer --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check olfactory_transformer
    
    - name: Import sorting check with isort
      run: |
        isort --check-only olfactory_transformer
    
    - name: Type checking with mypy
      run: |
        mypy olfactory_transformer || true  # Allow type errors for now
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=olfactory_transformer --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -e .
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r olfactory_transformer -f json -o bandit-report.json || true
    
    - name: Run semgrep
      run: |
        semgrep --config=auto olfactory_transformer --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} --index-url https://download.pytorch.org/whl/cpu
        pip install -e ".[dev]"
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json || true
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} --index-url https://download.pytorch.org/whl/cpu
        pip install -e ".[dev]"
    
    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379
        TEST_INTEGRATION: "true"
      run: |
        pytest tests/test_integration.py -v --maxfail=5
    
    - name: Test CLI
      run: |
        olfactory --help
        # Add more CLI tests as needed

  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: olfactory-transformer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm olfactory-transformer:test python -c "import olfactory_transformer; print('OK')"
        docker run --rm olfactory-transformer:test olfactory --help

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install sphinx sphinx-rtd-theme myst-parser
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Check for broken links
      run: |
        cd docs
        make linkcheck || true
    
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [test, security, integration, docker]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Create GitHub release assets
      run: |
        mkdir release-assets
        cp dist/* release-assets/
        
    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release-assets/

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [test, security, integration, docker]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ success() }}
      run: |
        echo "✅ All CI checks passed!"
        # Add notification logic (Slack, Discord, etc.)
    
    - name: Notify on failure
      if: ${{ failure() }}
      run: |
        echo "❌ CI checks failed!"
        # Add notification logic for failures

# Reusable workflow for performance regression detection
  regression:
    name: Performance Regression
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for comparison
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} --index-url https://download.pytorch.org/whl/cpu
        pip install -e ".[dev]"
        pip install pytest-benchmark asv
    
    - name: Run current benchmarks
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=current.json
    
    - name: Checkout main branch
      run: |
        git checkout main
        pip install -e ".[dev]"
    
    - name: Run baseline benchmarks
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=baseline.json
    
    - name: Compare performance
      run: |
        python scripts/compare_benchmarks.py baseline.json current.json
      continue-on-error: true